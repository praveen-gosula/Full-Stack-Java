1. https://leetcode.com/problems/remove-duplicates-from-sorted-array/

sol:  class Solution {
      public int removeDuplicates(int[] nums) {
        if (nums.length < 2)
		return nums.length;
 
	int j = 0;
	int i = 1;
 
	while (i < nums.length) {
		if (nums[i] != nums[j]) {
			j++;
			nums[j] = nums[i];
		}
 
                i++;
	}
 
	return (j + 1);
        
    }
}
      
---------------------------------------------------------------------------------------------------------------------------------------------

2. https://leetcode.com/problems/plus-one/

sol:   class Solution {
       public int[] plusOne(int[] digits) {
        String s="";
        int j=0;
        int l=digits.length;
        
        for(int i=0;i<l;i++){
            s+=Integer.toString(digits[i]);
        }
        int d=Integer.valueOf(s);
        d=d+1;
         String f=Integer.toString(d);
        char ch[]=f.toCharArray();
        int One[]=new int[ch.length];
        
           for(char c:ch){
            One[j]=c-'0';
            j++; 
    
           }
        return One;
        
         
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------

3. https://leetcode.com/problems/rotate-list/

sol:  /**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        ListNode s = head;
        ListNode f = head;
        if (head == null) {
            return null;
        }
        ListNode t = head;
        int count = 0;
        while (t!= null) {
            t = t.next;
            count ++;
        }
        k = k % count;
        for (int i = 0; i < k ; i++) {
            f = f.next;
        }
        while(f.next != null) {
            s = s.next;
            f = f.next;
        }
        f.next = head;
        ListNode res = s.next;
        s.next = null;
        return res;
        
    }
}

----------------------------------------------------------------------------------------------------------------------------------- 

4. https://leetcode.com/problems/single-number/

sol:   class Solution {
    public int singleNumber(int[] nums) {
        int result=nums[0];
        for(int i=1;i<nums.length;i++){
            result^=nums[i];
        }
        return result;
        
    }
}

-----------------------------------------------------------------------------------------------------------------------------------